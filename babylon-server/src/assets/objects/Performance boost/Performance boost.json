{
  "name": "Performance boost",
  "type": "object",
  "code": "var createScene = function () {\n    // Scene setup\n    let scene = new BABYLON.Scene(engine);\n    let storedMode = localStorage.getItem(\"perfMode\");\n\n    if (storedMode) {\n        scene.performancePriority = parseInt(storedMode);\n    } else {\n        scene.performancePriority = BABYLON.ScenePerformancePriority.BackwardCompatible;\n    }\n    let defaultPerfValue = 0;\n    if (scene.performancePriority === BABYLON.ScenePerformancePriority.Aggressive) {\n        let defaultPerf = localStorage.getItem(\"defaultPerf2\");\n\n        if (defaultPerf) {\n            defaultPerfValue = parseInt(defaultPerf);\n        }\n    }\n\n    let camera = new BABYLON.ArcRotateCamera(\"camera1\", Math.PI /2, Math.PI /2, 80, new BABYLON.Vector3(0, 0, 0), scene);\n    camera.attachControl(canvas, true);\n\n    let sphereCount = 2500;\n    let materialCount = 50;\n    let materials = [];\n\n    for (let index = 0; index < materialCount; index++) {\n        let pbr = new BABYLON.PBRMaterial(\"mat \" + index, scene);\n        pbr.emissiveColor = new BABYLON.Color3(Math.random(), Math.random(), Math.random());\n        materials.push(pbr);\n    }\n\n    for (let index = 0; index < sphereCount; index++) {\n        let sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 2, segments: 32}, scene);\n        sphere.position = new BABYLON.Vector3(20 - Math.random() * 40, 20 - Math.random() * 40, 20 - Math.random() * 40)\n        sphere.material = materials[index % materialCount];\n    }\n\n    // Create some random hierarchy\n    const levelMax = 5;\n    let level = 0;\n    for (let index = 0; index < sphereCount; index++) {\n        if (level !== 0) {\n            let sphere = scene.meshes[index];\n            sphere.setParent(scene.meshes[index - 1]);\n        }\n        level++;\n\n        if (level >= levelMax) {\n            level = 0;\n        }\n    }\n\n    scene.createDefaultEnvironment();\n\n    // Instrumentation\n    let instrumentation = new BABYLON.SceneInstrumentation(scene);\n    instrumentation.captureFrameTime = true;\n\n    // GUI\n    var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\n    var text1 = new BABYLON.GUI.TextBlock();\n    text1.color = \"white\";\n    text1.shadowColor = \"black\"\n    text1.shadowOffsetX = 2;\n    text1.shadowOffsetY = 2;\n    text1.fontSize = 24;\n    text1.height = \"40px\";\n    text1.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n    text1.paddingBottomInPixels = 120;\n    advancedTexture.addControl(text1);   \n    \n    var text2 = new BABYLON.GUI.TextBlock();\n    text2.color = \"white\";\n    text2.shadowColor = \"black\"\n    text2.shadowOffsetX = 2;\n    text2.shadowOffsetY = 2;\n    text2.fontSize = 24;\n    text2.height = \"80px\";\n    text2.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;  \n    text2.text = `${sphereCount} animated spheres (no geometry reuse) with ${materialCount} different materials\\r\\nScene performance mode set to ${scene.performancePriority === BABYLON.ScenePerformancePriority.Aggressive ? \"Aggressive\" : \"Backward compatible\"}`  \n    advancedTexture.addControl(text2);   \n\n    var button1 = BABYLON.GUI.Button.CreateSimpleButton(\"but1\", scene.performancePriority === BABYLON.ScenePerformancePriority.Aggressive ? \"Set scene performance priority to Backward compatible\" : \"Set scene performance priority to Prioritize performance\");\n    button1.width = \"500px\"\n    button1.height = \"50px\";\n    button1.color = \"white\";\n    button1.background = \"green\";\n    button1.onPointerUpObservable.add(function() {\n        localStorage.setItem(\"perfMode\", scene.performancePriority === BABYLON.ScenePerformancePriority.Aggressive ? BABYLON.ScenePerformancePriority.BackwardCompatible : BABYLON.ScenePerformancePriority.Aggressive);\n        location.reload();\n    });\n    button1.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n    advancedTexture.addControl(button1);      \n\n    scene.onBeforeRenderObservable.add(() => {\n        let perfValue = instrumentation.frameTimeCounter.lastSecAverage.toFixed(2);\n        text1.text = perfValue + \"ms per frame\";\n\n        if (scene.performancePriority === BABYLON.ScenePerformancePriority.Aggressive) {\n            if (defaultPerfValue) {\n                text1.text += `\\r\\nPerformance boost: ${parseInt(perfValue * 100 / defaultPerfValue)}%`;\n            } else {\n                text1.text += \"\\r\\nRun in backward compatible mode to get a comparison value\";\n            }\n        }\n\n        for (let index = 0; index < scene.meshes.length; index++) {\n            const sphere = scene.meshes[index];\n            sphere.rotation.y += 0.01;\n        }\n    });\n\n    if (scene.performancePriority === BABYLON.ScenePerformancePriority.BackwardCompatible) {\n        setInterval(() => {\n            localStorage.setItem(\"defaultPerf2\", instrumentation.frameTimeCounter.lastSecAverage.toFixed(2));\n        }, 1000)\n    }\n    \n\n    return scene;\n};",
  "created_at": "2025-07-29T16:09:37.731724",
  "updated_at": "2025-07-29T16:09:37.731951"
}