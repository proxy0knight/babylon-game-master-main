{
  "name": "Follow camera box",
  "type": "map",
  "code": "var createScene = function () {\n\n    // This creates a basic Babylon Scene object (non-mesh)\n    var scene = new BABYLON.Scene(engine);\n\n\t/********** FOLLOW CAMERA EXAMPLE **************************/\n\n    // This creates and initially positions a follow camera \t\n    var camera = new BABYLON.FollowCamera(\"FollowCam\", new BABYLON.Vector3(0, 10, -10), scene);\n\t\n\t//The goal distance of camera from target\n\tcamera.radius = 30;\n\t\n\t// The goal height of camera above local origin (centre) of target\n\tcamera.heightOffset = 10;\n\t\n\t// The goal rotation of camera around local origin (centre) of target in x y plane\n\tcamera.rotationOffset = 0;\n\t\n\t//Acceleration of camera in moving from current to goal position\n\tcamera.cameraAcceleration = 0.005\n\t\n\t//The speed at which acceleration is halted \n\tcamera.maxCameraSpeed = 10\n\t\n\t//camera.target is set after the target's creation\n    \n\t// This attaches the camera to the canvas\n    camera.attachControl(canvas, true);\n\t\n\t/**************************************************************/\n\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\n\t\n\t//Material\n\tvar mat = new BABYLON.StandardMaterial(\"mat1\", scene);\n  \tmat.alpha = 1.0;\n  \tmat.diffuseColor = new BABYLON.Color3(0.5, 0.5, 1.0);\n    var texture = new BABYLON.Texture(\"https://i.imgur.com/vxH5bCg.jpg\", scene);\n    mat.diffuseTexture = texture;\n\t\n\t//Different face for each side of box to show camera rotation\n\tvar hSpriteNb =  3;  // 3 sprites per row\n    var vSpriteNb =  2;  // 2 sprite rows\t\n\t\n\tvar faceUV = new Array(6);\n\n  \tfor (var i = 0; i < 6; i++) {\n    \tfaceUV[i] = new BABYLON.Vector4(i/hSpriteNb, 0, (i+1)/hSpriteNb, 1 / vSpriteNb);\n  \t}\n\t  \n\t// Shape to follow\n\tvar box = BABYLON.MeshBuilder.CreateBox(\"box\", {size: 2, faceUV: faceUV }, scene);\n\tbox.position = new BABYLON.Vector3(20, 0, 10);\n\tbox.material = mat;\n\n\t//create solid particle system of stationery grey boxes to show movement of box and camera\n    var boxesSPS = new BABYLON.SolidParticleSystem(\"boxes\", scene, {updatable: false});\n    \n    //function to position of grey boxes\n    var set_boxes = function(particle, i, s) {\n        particle.position = new BABYLON.Vector3(-50 + Math.random()*100, -50 + Math.random()*100, -50 + Math.random()*100); \n    }\n    \n    //add 400 boxes\n    boxesSPS.addShape(box, 400, {positionFunction:set_boxes});  \n    var boxes = boxesSPS.buildMesh(); // mesh of boxes\n\n    /*****************SET TARGET FOR CAMERA************************/ \n\tcamera.lockedTarget = box;\n\t/**************************************************************/\n\t\n\t\n\t//box movement variables\n\tvar alpha = 0;\n\tvar orbit_radius = 20\n\t\n\t\n\t//Move the box to see that the camera follows it \t\n\tscene.registerBeforeRender(function () {\n     alpha +=0.01;\n\t box.position.x = orbit_radius*Math.cos(alpha);\n\t box.position.y = orbit_radius*Math.sin(alpha);\n\t box.position.z = 10*Math.sin(2*alpha);\n\t \n\t //change the viewing angle of the camera as it follows the box\n\t camera.rotationOffset = (18*alpha)%360;\n    });\n\t\n    return scene;\n\n};",
  "created_at": "2025-07-29T15:42:49.518351",
  "updated_at": "2025-07-29T15:42:49.518762"
}